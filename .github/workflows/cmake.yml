name: CMake Build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - rel/*
      - dev/*
      - main
      - ppc-support
  pull_request:
    branches:
      - rel/*
      - dev/*
      - main

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  VCPKG_GIT_REF: 8a9a97315aefb3f8bc5d81bf66ca0025938b9c91

jobs:


  build-ubuntu-x86:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Update package listings
        run: sudo apt-get update

      - name: Install Build Tools
        run: sudo apt-get install -y bison flex valgrind

      - name: Install Dependencies
        run: sudo apt-get install -y check libbz2-dev libcurl4-openssl-dev libjson-c-dev libmilter-dev libncurses5-dev libpcre3-dev libssl-dev libxml2-dev zlib1g-dev zlib1g

      - name: Install pytest for easier to read test results
        run: python3 -m pip install pytest

      - uses: lukka/get-cmake@v3.21.2

      - name: Create Build Directory
        shell: bash
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run:
          cmake ${{runner.workspace}}/clamav -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          -DENABLE_STATIC_LIB=ON
          -DENABLE_EXAMPLES=ON

      - name: Build
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config ${{ env.BUILD_TYPE }}

      - name: Test
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{ env.BUILD_TYPE }} -V

  build-ubuntu-ppc64le:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v1
      
      - name: Add ppc64le VM to known hosts
        run: |
          ssh-keyscan ${{ secrets.PPC64LE_IP }}  >> ~/.ssh/known_hosts # Add live server IP to known hosts.

      - name: Compile and test ClamAV natively on ppc64le
        uses: appleboy/ssh-action@master
        env:
          BUILD_TYPE: ${{ env.BUILD_TYPE }}
        with:
          host: ${{ secrets.PPC64LE_IP }}
          username: ${{ secrets.PPC64LE_USER }}
          key: ${{ secrets.PPC64LE_KEY }}
          envs: BUILD_TYPE
          script: |
            #Clone ClamAV source code
            sudo git clone https://github.com/snehakpersistent/clamav.git && cd clamav
            sudo git checkout ppc-support
            
            #Update package listings
            sudo apt-get update -y
            
            #Install Build Tools
            sudo apt-get install -y bison flex valgrind
            
            #Install Dependencies
            sudo apt-get install -y check libbz2-dev libcurl4-openssl-dev libjson-c-dev libmilter-dev libncurses5-dev libpcre3-dev libpcre2-dev libssl-dev libxml2-dev python3 python3-pip cmake git curl
            sudo curl https://sh.rustup.rs -sSf | sh -s -- -y
            
            #Install pytest for easier to read test results
            sudo python3 -m pip3 install pytest
            
            #Create Build Directory           
            sudo cmake -E make_directory build
            
            #Configure CMake
            cd build
            sudo cmake clamav -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DENABLE_STATIC_LIB=ON -DENABLE_EXAMPLES=ON
            
            #Build
            sudo cmake --build . --config $BUILD_TYPE
            
            #Test
            sudo ctest -C $BUILD_TYPE -V